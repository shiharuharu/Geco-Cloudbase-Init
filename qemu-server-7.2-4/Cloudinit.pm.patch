--- /usr/share/perl5/PVE/QemuServer/Cloudinit.pm.orig	2022-08-16 19:59:20.000000000 +0800
+++ /usr/share/perl5/PVE/QemuServer/Cloudinit.pm	2022-09-08 11:49:16.845356115 +0800
@@ -163,13 +163,22 @@ sub configdrive2_network {
     $content .= "iface lo inet loopback\n\n";
 
     my ($searchdomains, $nameservers) = get_dns_conf($conf);
+
+    ## support windows
+    my $ostype = $conf->{"ostype"};
+    my $default_dns = '';                                                                                                                                                                                          
+    my $default_search = '';
+    ##
+
     if ($nameservers && @$nameservers) {
 	$nameservers = join(' ', @$nameservers);
 	$content .= "        dns_nameservers $nameservers\n";
+        $default_dns = $nameservers; # Support windows
     }
     if ($searchdomains && @$searchdomains) {
 	$searchdomains = join(' ', @$searchdomains);
 	$content .= "        dns_search $searchdomains\n";
+        $default_search = $searchdomains; # Support windows
     }
 
     my @ifaces = grep { /^net(\d+)$/ } keys %$conf;
@@ -189,6 +198,12 @@ sub configdrive2_network {
 		$content .= "        address $addr\n";
 		$content .= "        netmask $mask\n";
 		$content .= "        gateway $net->{gw}\n" if $net->{gw};
+                ## Support Windows
+                if(PVE::QemuServer::windows_version($ostype) && ($id eq "eth0")) {
+                    $content .= "        dns-nameservers $default_dns\n";
+                    $content .= "        dns-search $default_search\n";
+                }
+                ##
 	    }
 	}
 	if ($net->{ip6}) {
@@ -207,19 +222,96 @@ sub configdrive2_network {
     return $content;
 }
 
+sub get_mac_addresses {
+    my ($conf) = @_;
+
+    my $dhcpstring = undef;
+    my @dhcpmacs = ();
+    my @ifaces = grep { /^net(\d+)$/ } keys %$conf;
+
+    foreach my $iface (sort @ifaces) {
+        (my $id = $iface) =~ s/^net//;
+        my $net = PVE::QemuServer::parse_net($conf->{$iface});
+        next if !$conf->{"ipconfig$id"};
+        my $ipconfig = PVE::QemuServer::parse_ipconfig($conf->{"ipconfig$id"});
+
+        my $mac = lc $net->{macaddr};
+
+        if (($ipconfig->{ip}) and ($ipconfig->{ip} eq 'dhcp')){
+            push @dhcpmacs, $mac;
+        }
+    }
+
+    if (@dhcpmacs){
+        $dhcpstring = ",\n     \"dhcp\":[";
+        foreach my $mac (@dhcpmacs){
+            if ($mac != $dhcpmacs[-1]){
+                $dhcpstring .= "\"$mac\",";
+            }
+            else{
+                $dhcpstring .= "\"$mac\"]";
+            }
+        }
+    }
+    return ($dhcpstring);
+}
+
 sub configdrive2_gen_metadata {
-    my ($user, $network) = @_;
+    my ($conf, $vmid, $user, $network) = @_;
+
+    # Get mac addresses of dhcp nics from conf file  
+    my $dhcpmacs = undef;
+    $dhcpmacs = get_mac_addresses($conf);
 
+    # Get UUID
     my $uuid_str = Digest::SHA::sha1_hex($user.$network);
-    return configdrive2_metadata($uuid_str);
+
+    # Get hostname
+    my ($hostname, $fqdn) = get_hostname_fqdn($conf, $vmid);
+
+    # Get username, default to Administrator if none
+    my $username = undef;
+    if (defined($conf->{ciuser})){
+        my $name = $conf->{ciuser};
+        $username = ",\n        \"admin_username\": \"$name\""
+    }
+
+    # Get user password
+    my $password = $conf->{cipassword};
+
+    # Get ssh keys and make a list out of it in json format
+    my $keystring = undef;
+    my $pubkeys = $conf->{sshkeys};
+    $pubkeys = URI::Escape::uri_unescape($pubkeys);
+    my @pubkeysarray = split "\n", $pubkeys;
+    if (@pubkeysarray) {
+        my $arraylength = @pubkeysarray;
+        my $incrementer = 1;
+        $keystring =",\n     \"public_keys\": {\n";
+        for my $key (@pubkeysarray){
+            $keystring .= "        \"SSH${incrementer}\" : \"${key}\"";
+            if ($arraylength != $incrementer){
+                $keystring .= ",\n";
+            }else{
+                $keystring .= "\n     }";
+            }
+            $incrementer++;
+        }
+    }
+
+    return configdrive2_metadata($password, $uuid_str, $hostname, $username, $keystring, $network, $dhcpmacs);
 }
 
 sub configdrive2_metadata {
-    my ($uuid) = @_;
+    my ($password, $uuid, $hostname, $username, $pubkeys, $network, $dhcpmacs) = @_;
     return <<"EOF";
 {
-     "uuid": "$uuid",
-     "network_config": { "content_path": "/content/0000" }
+     "meta":{
+        "admin_pass": "$password"$username
+     },
+     "uuid":"$uuid",
+     "hostname":"$hostname",
+     "network_config":{"content_path":"/content/0000"}$pubkeys$dhcpmacs
 }
 EOF
 }
@@ -233,7 +325,7 @@ sub generate_configdrive2 {
     $vendor_data = '' if !defined($vendor_data);
 
     if (!defined($meta_data)) {
-	$meta_data = configdrive2_gen_metadata($user_data, $network_data);
+	$meta_data = configdrive2_gen_metadata($conf, $vmid, $user_data, $network_data);
     }
 
     # we always allocate a 4MiB disk for cloudinit and with the overhead of the ISO
@@ -596,7 +688,7 @@ sub dump_cloudinit_config {
 	    return nocloud_gen_metadata($user, $network);
 	} else {
 	    my $network = configdrive2_network($conf);
-	    return configdrive2_gen_metadata($user, $network);
+	    return configdrive2_gen_metadata($conf, $vmid, $user, $network);
 	}
     }
 }
